# Power BI Custom Table Visual

![Power BI](https://img.shields.io/badge/Power_BI-F2C811?style=for-the-badge&logo=powerbi&logoColor=black)
![TypeScript](https://img.shields.io/badge/typescript-%23007ACC.svg?style=for-the-badge&logo=typescript&logoColor=white)
![Version](https://img.shields.io/badge/version-2.0.0-blue.svg?style=for-the-badge)
![License](https://img.shields.io/badge/license-MIT-green.svg?style=for-the-badge)

**Advanced Power BI table visual with integrated sparklines, DAX SVG rendering, and flexible configuration that prevents automatic data grouping.**

## Quick Installation

### Download and Import
1. **[Download MiTabla.pbiviz](https://github.com/yourusername/powerbi-custom-table/releases/latest/download/MiTabla.pbiviz)**
2. Open Power BI Desktop or Service
3. Navigate to Visualizations pane → "..." → "Import visual from file"
4. Select the downloaded file
5. The visual is now available in your visualizations pane

### Alternative Installation
```bash
# Download latest release
curl -L -o MiTabla.pbiviz https://github.com/yourusername/powerbi-custom-table/releases/latest/download/MiTabla.pbiviz
```

---

## Key Features

### Core Functionality

| Feature | Description | Implementation |
|---------|-------------|----------------|
| **No Auto-Grouping** | Displays all data rows without Power BI's automatic aggregation | Detail mode detection |
| **DAX SVG Rendering** | Native support for SVG content generated by DAX expressions | Enhanced SVG parser |
| **Automatic Sparklines** | Line, bar, and column sparklines with configurable styling | Built-in chart engine |
| **Status Icon Detection** | Automatic conversion of status fields to visual indicators | Pattern recognition |
| **Percentage Donuts** | Auto-conversion of percentage values to circular progress indicators | Dynamic chart generation |
| **Advanced Theming** | Light, dark, and minimalist themes with custom presets | CSS-based styling |
| **Responsive Design** | Adapts to any container size with optimized layout | Flexible grid system |
| **Accessibility Support** | Screen reader compatibility and keyboard navigation | ARIA compliance |

### Technical Specifications

- **API Version**: 5.6.0+
- **Rendering Engine**: DOM-based with secure innerHTML handling
- **Browser Support**: Chrome, Edge, Firefox, Safari
- **Data Capacity**: 10,000+ rows without performance degradation
- **File Size**: <200KB optimized bundle

---

## Configuration Guide

### Recommended Field Mapping

```
COLUMNS Section:
├── Campaign (Primary dimension)
├── Type
├── Brand
├── Format
└── Channel

VALUES Section:
├── Impressions (No summarization)
├── Clicks (No summarization)
├── Spend (No summarization)
├── CPC (No summarization)
├── CPM (No summarization)
├── CTR (No summarization)
└── Status_SVG (No summarization)
```

### Field Configuration Requirements

**Critical**: Configure all numeric fields as "Don't summarize" to prevent data aggregation:
1. Click the dropdown arrow next to each field in VALUES
2. Select "Don't summarize" instead of "Sum" or "Average"
3. This ensures all individual records are displayed

### Advanced Features Configuration

#### SVG from DAX
```dax
Status_Chip = 
VAR Estado = SELECTEDVALUE('campaigns'[status])
VAR Color = SWITCH(Estado, "Active", "#22C55E", "Paused", "#F59E42", "Completed", "#9CA3AF", "#A3A3A3")
VAR Label = SWITCH(Estado, "Active", "Active", "Paused", "Paused", "Completed", "Done", Estado)
RETURN
"data:image/svg+xml;utf8," &
"<svg xmlns='http://www.w3.org/2000/svg' width='50' height='50' viewBox='0 0 50 50'>" &
    "<circle cx='25' cy='25' r='20' fill='" & Color & "'/>" &
    "<text x='50%' y='57%' text-anchor='middle' font-family='Segoe UI' font-size='12' fill='white' font-weight='bold'>" & Label & "</text>" &
"</svg>"
```

#### Sparkline Data Format
```dax
Trend_Data = "spark:[" & 
    VALUE(Table[Jan]) & "," & 
    VALUE(Table[Feb]) & "," & 
    VALUE(Table[Mar]) & "," & 
    VALUE(Table[Apr]) & "]"
```

#### Donut Chart Format
```dax
Performance_Donut = "donut:" & Table[Actual] & ":" & Table[Target]
```

---

## Visual Customization

### Formatting Options

#### Row Formatting
- **Even Row Background**: Configurable hex color
- **Odd Row Background**: Configurable hex color
- **Row Height**: Auto-adjusting based on content

#### Column Formatting
- **Horizontal Alignment**: Left, Center, Right
- **Vertical Alignment**: Top, Middle, Bottom
- **Column Width**: Min/Max width constraints

#### Header Formatting
- **Background Color**: Customizable header styling
- **Font Color**: Header text color
- **Alignment**: Independent header alignment
- **Sticky Headers**: Optional fixed headers on scroll

#### Cell Formatting
- **Font Family**: Configurable typography
- **Font Size**: Scalable text sizing
- **Content Alignment**: Per-column alignment options

### Mini-Charts Configuration
- **Donut Size**: 16-48px diameter
- **SVG Size**: 24-64px for DAX-generated content
- **Sparkline Color**: Configurable line/bar colors
- **Auto-Detection**: Toggle automatic chart generation

---

## Troubleshooting

### Common Issues and Solutions

#### **Issue**: Only 10-20 rows visible instead of full dataset
**Cause**: Power BI automatic data aggregation
**Solution**: 
1. Move all fields from "Columns" to "Values" section
2. Set each field to "Don't summarize"
3. Keep only primary dimension in "Columns"

#### **Issue**: SVG content shows as "SVG Error"
**Cause**: Malformed SVG or encoding issues
**Solution**:
1. Verify SVG syntax in DAX expression
2. Ensure proper UTF-8 encoding
3. Check console (F12) for detailed error messages

#### **Issue**: Sparklines not rendering
**Cause**: Incorrect data format
**Solution**:
1. Verify data format: `spark:[1,2,3,4]`
2. Ensure numeric values only
3. Check for proper JSON array syntax

#### **Issue**: Performance degradation with large datasets
**Solution**:
1. Enable pagination in visual settings
2. Use column width constraints
3. Optimize DAX expressions for calculated fields

### Debug Mode
Enable detailed logging by opening browser console (F12) and looking for messages starting with:
- `DEBUG CONFIGURATION`
- `SVG Original:`
- `SVG Decoded:`

---

## Development

### Building from Source

#### Prerequisites
- Node.js 16+ 
- Power BI Visual Tools 5.6.0+
- TypeScript 4.0+

#### Setup
```bash
# Clone repository
git clone https://github.com/yourusername/powerbi-custom-table.git
cd powerbi-custom-table

# Install dependencies
npm install

# Build visual
npm run build

# Package for distribution
npm run package
```

#### Project Structure
```
src/
├── visual.ts          # Main visual implementation
├── settings.ts        # Configuration interface
├── capabilities.json  # Visual capabilities definition
└── style/
    └── visual.less    # Styling definitions

dist/
└── MiTabla.pbiviz    # Compiled visual package
```

### Contributing

#### Development Guidelines
1. Follow TypeScript strict mode conventions
2. Maintain compatibility with Power BI API 5.6.0+
3. Include comprehensive error handling
4. Add unit tests for new features
5. Update documentation for API changes

#### Submitting Changes
1. Fork the repository
2. Create feature branch (`git checkout -b feature/amazing-feature`)
3. Commit changes (`git commit -m 'Add amazing feature'`)
4. Push to branch (`git push origin feature/amazing-feature`)
5. Open Pull Request

---

## API Reference

### Visual Methods

#### `update(options: VisualUpdateOptions)`
Main rendering method called when data or settings change.

#### `enumerateObjectInstances(options: EnumerateVisualObjectInstancesOptions)`
Returns available formatting options for the property pane.

#### `setupInteractions(dataView: DataView)`
Configures user interaction handlers and accessibility features.

### Configuration Objects

#### `FormattingSettings`
```typescript
interface FormattingSettings {
    evenRowBgColor: string;
    oddRowBgColor: string;
    alignHorizontal: string;
    alignVertical: string;
    headerBgColor: string;
    headerFontColor: string;
    fontFamily: string;
    fontSize: number;
    donutSize: number;
    daxSvgSize: number;
    autoDetectStatus: boolean;
    autoDetectPercentages: boolean;
    enableScroll: boolean;
    headerSticky: boolean;
}
```

---

## Examples

### Marketing Campaign Dashboard
Perfect for displaying campaign performance data with status indicators and trend analysis.

**Sample Data Structure:**
```
Campaign        | Type      | Impressions | Clicks  | CTR   | Status   | Trend
AI Style Push   | Promotion | 3,283,810   | 280,188 | 8.5%  | Active   | spark:[100,120,110,130]
Back to Fitness | Promotion | 2,967,555   | 280,170 | 9.4%  | Paused   | spark:[80,90,85,95]
Fashion Forward | Promotion | 2,606,865   | 271,633 | 10.4% | Completed| spark:[60,70,75,80]
```

### Financial Performance Tracking
Ideal for financial reporting with progress indicators and performance metrics.

### Project Management
Excellent for project status tracking with visual progress indicators and timeline data.

---

## Support

### Getting Help
- **Issues**: [GitHub Issues](https://github.com/yourusername/powerbi-custom-table/issues)
- **Discussions**: [GitHub Discussions](https://github.com/yourusername/powerbi-custom-table/discussions)
- **Email**: [your.email@domain.com](mailto:your.email@domain.com)

### Documentation
- **Power BI Visuals Documentation**: [Microsoft Learn](https://learn.microsoft.com/en-us/power-bi/developer/visuals/)
- **TypeScript Reference**: [TypeScript Handbook](https://www.typescriptlang.org/docs/)

---

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Acknowledgments

- Microsoft Power BI team for the visual development framework
- Power BI Community for feedback and feature requests
- Contributors and testers who helped improve this visual

---

## Changelog

### Version 2.0.0
- Added DAX SVG rendering support
- Implemented automatic sparkline generation
- Enhanced data grouping prevention
- Improved accessibility features
- Added comprehensive theming options

### Version 1.5.0
- Initial stable release
- Basic table functionality
- Column formatting options
- Responsive design implementation

---

**Built with ❤️ for the Power BI community**